// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mytype.proto

#ifndef PROTOBUF_mytype_2eproto__INCLUDED
#define PROTOBUF_mytype_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mytype_2eproto();
void protobuf_AssignDesc_mytype_2eproto();
void protobuf_ShutdownFile_mytype_2eproto();

class MyType;
class MyType1;
class MyType2;
class MyType3;
class MyTypeArray;
class TestRequiredField;

// ===================================================================

class MyType : public ::google::protobuf::Message {
 public:
  MyType();
  virtual ~MyType();

  MyType(const MyType& from);

  inline MyType& operator=(const MyType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyType& default_instance();

  void Swap(MyType* other);

  // implements Message ----------------------------------------------

  MyType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyType& from);
  void MergeFrom(const MyType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 longId = 2;
  inline bool has_longid() const;
  inline void clear_longid();
  static const int kLongIdFieldNumber = 2;
  inline ::google::protobuf::int64 longid() const;
  inline void set_longid(::google::protobuf::int64 value);

  // optional bytes StrMessage = 3;
  inline bool has_strmessage() const;
  inline void clear_strmessage();
  static const int kStrMessageFieldNumber = 3;
  inline const ::std::string& strmessage() const;
  inline void set_strmessage(const ::std::string& value);
  inline void set_strmessage(const char* value);
  inline void set_strmessage(const void* value, size_t size);
  inline ::std::string* mutable_strmessage();
  inline ::std::string* release_strmessage();
  inline void set_allocated_strmessage(::std::string* strmessage);

  // @@protoc_insertion_point(class_scope:MyType)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_longid();
  inline void clear_has_longid();
  inline void set_has_strmessage();
  inline void clear_has_strmessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 longid_;
  ::std::string* strmessage_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_mytype_2eproto();
  friend void protobuf_AssignDesc_mytype_2eproto();
  friend void protobuf_ShutdownFile_mytype_2eproto();

  void InitAsDefaultInstance();
  static MyType* default_instance_;
};
// -------------------------------------------------------------------

class MyType1 : public ::google::protobuf::Message {
 public:
  MyType1();
  virtual ~MyType1();

  MyType1(const MyType1& from);

  inline MyType1& operator=(const MyType1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyType1& default_instance();

  void Swap(MyType1* other);

  // implements Message ----------------------------------------------

  MyType1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyType1& from);
  void MergeFrom(const MyType1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 longId = 2;
  inline bool has_longid() const;
  inline void clear_longid();
  static const int kLongIdFieldNumber = 2;
  inline ::google::protobuf::int64 longid() const;
  inline void set_longid(::google::protobuf::int64 value);

  // optional bytes StrMessage = 3;
  inline bool has_strmessage() const;
  inline void clear_strmessage();
  static const int kStrMessageFieldNumber = 3;
  inline const ::std::string& strmessage() const;
  inline void set_strmessage(const ::std::string& value);
  inline void set_strmessage(const char* value);
  inline void set_strmessage(const void* value, size_t size);
  inline ::std::string* mutable_strmessage();
  inline ::std::string* release_strmessage();
  inline void set_allocated_strmessage(::std::string* strmessage);

  // @@protoc_insertion_point(class_scope:MyType1)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_longid();
  inline void clear_has_longid();
  inline void set_has_strmessage();
  inline void clear_has_strmessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 longid_;
  ::std::string* strmessage_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_mytype_2eproto();
  friend void protobuf_AssignDesc_mytype_2eproto();
  friend void protobuf_ShutdownFile_mytype_2eproto();

  void InitAsDefaultInstance();
  static MyType1* default_instance_;
};
// -------------------------------------------------------------------

class MyType2 : public ::google::protobuf::Message {
 public:
  MyType2();
  virtual ~MyType2();

  MyType2(const MyType2& from);

  inline MyType2& operator=(const MyType2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyType2& default_instance();

  void Swap(MyType2* other);

  // implements Message ----------------------------------------------

  MyType2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyType2& from);
  void MergeFrom(const MyType2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 longId = 2;
  inline bool has_longid() const;
  inline void clear_longid();
  static const int kLongIdFieldNumber = 2;
  inline ::google::protobuf::int64 longid() const;
  inline void set_longid(::google::protobuf::int64 value);

  // optional bytes StrMessage = 3;
  inline bool has_strmessage() const;
  inline void clear_strmessage();
  static const int kStrMessageFieldNumber = 3;
  inline const ::std::string& strmessage() const;
  inline void set_strmessage(const ::std::string& value);
  inline void set_strmessage(const char* value);
  inline void set_strmessage(const void* value, size_t size);
  inline ::std::string* mutable_strmessage();
  inline ::std::string* release_strmessage();
  inline void set_allocated_strmessage(::std::string* strmessage);

  // @@protoc_insertion_point(class_scope:MyType2)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_longid();
  inline void clear_has_longid();
  inline void set_has_strmessage();
  inline void clear_has_strmessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 longid_;
  ::std::string* strmessage_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_mytype_2eproto();
  friend void protobuf_AssignDesc_mytype_2eproto();
  friend void protobuf_ShutdownFile_mytype_2eproto();

  void InitAsDefaultInstance();
  static MyType2* default_instance_;
};
// -------------------------------------------------------------------

class MyType3 : public ::google::protobuf::Message {
 public:
  MyType3();
  virtual ~MyType3();

  MyType3(const MyType3& from);

  inline MyType3& operator=(const MyType3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyType3& default_instance();

  void Swap(MyType3* other);

  // implements Message ----------------------------------------------

  MyType3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyType3& from);
  void MergeFrom(const MyType3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 id = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int32 value);
  inline void add_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id();

  // repeated int64 longId = 2;
  inline int longid_size() const;
  inline void clear_longid();
  static const int kLongIdFieldNumber = 2;
  inline ::google::protobuf::int64 longid(int index) const;
  inline void set_longid(int index, ::google::protobuf::int64 value);
  inline void add_longid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      longid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_longid();

  // repeated bytes StrMessage = 3;
  inline int strmessage_size() const;
  inline void clear_strmessage();
  static const int kStrMessageFieldNumber = 3;
  inline const ::std::string& strmessage(int index) const;
  inline ::std::string* mutable_strmessage(int index);
  inline void set_strmessage(int index, const ::std::string& value);
  inline void set_strmessage(int index, const char* value);
  inline void set_strmessage(int index, const void* value, size_t size);
  inline ::std::string* add_strmessage();
  inline void add_strmessage(const ::std::string& value);
  inline void add_strmessage(const char* value);
  inline void add_strmessage(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& strmessage() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strmessage();

  // @@protoc_insertion_point(class_scope:MyType3)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > longid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strmessage_;
  friend void  protobuf_AddDesc_mytype_2eproto();
  friend void protobuf_AssignDesc_mytype_2eproto();
  friend void protobuf_ShutdownFile_mytype_2eproto();

  void InitAsDefaultInstance();
  static MyType3* default_instance_;
};
// -------------------------------------------------------------------

class MyTypeArray : public ::google::protobuf::Message {
 public:
  MyTypeArray();
  virtual ~MyTypeArray();

  MyTypeArray(const MyTypeArray& from);

  inline MyTypeArray& operator=(const MyTypeArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyTypeArray& default_instance();

  void Swap(MyTypeArray* other);

  // implements Message ----------------------------------------------

  MyTypeArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyTypeArray& from);
  void MergeFrom(const MyTypeArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MyType t = 1;
  inline int t_size() const;
  inline void clear_t();
  static const int kTFieldNumber = 1;
  inline const ::MyType& t(int index) const;
  inline ::MyType* mutable_t(int index);
  inline ::MyType* add_t();
  inline const ::google::protobuf::RepeatedPtrField< ::MyType >&
      t() const;
  inline ::google::protobuf::RepeatedPtrField< ::MyType >*
      mutable_t();

  // repeated .MyType t1 = 2;
  inline int t1_size() const;
  inline void clear_t1();
  static const int kT1FieldNumber = 2;
  inline const ::MyType& t1(int index) const;
  inline ::MyType* mutable_t1(int index);
  inline ::MyType* add_t1();
  inline const ::google::protobuf::RepeatedPtrField< ::MyType >&
      t1() const;
  inline ::google::protobuf::RepeatedPtrField< ::MyType >*
      mutable_t1();

  // repeated .MyType t2 = 3;
  inline int t2_size() const;
  inline void clear_t2();
  static const int kT2FieldNumber = 3;
  inline const ::MyType& t2(int index) const;
  inline ::MyType* mutable_t2(int index);
  inline ::MyType* add_t2();
  inline const ::google::protobuf::RepeatedPtrField< ::MyType >&
      t2() const;
  inline ::google::protobuf::RepeatedPtrField< ::MyType >*
      mutable_t2();

  // repeated .MyType t3 = 4;
  inline int t3_size() const;
  inline void clear_t3();
  static const int kT3FieldNumber = 4;
  inline const ::MyType& t3(int index) const;
  inline ::MyType* mutable_t3(int index);
  inline ::MyType* add_t3();
  inline const ::google::protobuf::RepeatedPtrField< ::MyType >&
      t3() const;
  inline ::google::protobuf::RepeatedPtrField< ::MyType >*
      mutable_t3();

  // @@protoc_insertion_point(class_scope:MyTypeArray)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MyType > t_;
  ::google::protobuf::RepeatedPtrField< ::MyType > t1_;
  ::google::protobuf::RepeatedPtrField< ::MyType > t2_;
  ::google::protobuf::RepeatedPtrField< ::MyType > t3_;
  friend void  protobuf_AddDesc_mytype_2eproto();
  friend void protobuf_AssignDesc_mytype_2eproto();
  friend void protobuf_ShutdownFile_mytype_2eproto();

  void InitAsDefaultInstance();
  static MyTypeArray* default_instance_;
};
// -------------------------------------------------------------------

class TestRequiredField : public ::google::protobuf::Message {
 public:
  TestRequiredField();
  virtual ~TestRequiredField();

  TestRequiredField(const TestRequiredField& from);

  inline TestRequiredField& operator=(const TestRequiredField& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestRequiredField& default_instance();

  void Swap(TestRequiredField* other);

  // implements Message ----------------------------------------------

  TestRequiredField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestRequiredField& from);
  void MergeFrom(const TestRequiredField& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .MyType val = 1;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 1;
  inline const ::MyType& val() const;
  inline ::MyType* mutable_val();
  inline ::MyType* release_val();
  inline void set_allocated_val(::MyType* val);

  // @@protoc_insertion_point(class_scope:TestRequiredField)
 private:
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::MyType* val_;
  friend void  protobuf_AddDesc_mytype_2eproto();
  friend void protobuf_AssignDesc_mytype_2eproto();
  friend void protobuf_ShutdownFile_mytype_2eproto();

  void InitAsDefaultInstance();
  static TestRequiredField* default_instance_;
};
// ===================================================================


// ===================================================================

// MyType

// optional int32 id = 1;
inline bool MyType::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyType::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyType::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyType::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MyType::id() const {
  // @@protoc_insertion_point(field_get:MyType.id)
  return id_;
}
inline void MyType::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MyType.id)
}

// optional int64 longId = 2;
inline bool MyType::has_longid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyType::set_has_longid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyType::clear_has_longid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyType::clear_longid() {
  longid_ = GOOGLE_LONGLONG(0);
  clear_has_longid();
}
inline ::google::protobuf::int64 MyType::longid() const {
  // @@protoc_insertion_point(field_get:MyType.longId)
  return longid_;
}
inline void MyType::set_longid(::google::protobuf::int64 value) {
  set_has_longid();
  longid_ = value;
  // @@protoc_insertion_point(field_set:MyType.longId)
}

// optional bytes StrMessage = 3;
inline bool MyType::has_strmessage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MyType::set_has_strmessage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MyType::clear_has_strmessage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MyType::clear_strmessage() {
  if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_->clear();
  }
  clear_has_strmessage();
}
inline const ::std::string& MyType::strmessage() const {
  // @@protoc_insertion_point(field_get:MyType.StrMessage)
  return *strmessage_;
}
inline void MyType::set_strmessage(const ::std::string& value) {
  set_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_ = new ::std::string;
  }
  strmessage_->assign(value);
  // @@protoc_insertion_point(field_set:MyType.StrMessage)
}
inline void MyType::set_strmessage(const char* value) {
  set_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_ = new ::std::string;
  }
  strmessage_->assign(value);
  // @@protoc_insertion_point(field_set_char:MyType.StrMessage)
}
inline void MyType::set_strmessage(const void* value, size_t size) {
  set_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_ = new ::std::string;
  }
  strmessage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MyType.StrMessage)
}
inline ::std::string* MyType::mutable_strmessage() {
  set_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MyType.StrMessage)
  return strmessage_;
}
inline ::std::string* MyType::release_strmessage() {
  clear_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strmessage_;
    strmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MyType::set_allocated_strmessage(::std::string* strmessage) {
  if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strmessage_;
  }
  if (strmessage) {
    set_has_strmessage();
    strmessage_ = strmessage;
  } else {
    clear_has_strmessage();
    strmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MyType.StrMessage)
}

// -------------------------------------------------------------------

// MyType1

// optional int32 id = 1;
inline bool MyType1::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyType1::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyType1::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyType1::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MyType1::id() const {
  // @@protoc_insertion_point(field_get:MyType1.id)
  return id_;
}
inline void MyType1::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MyType1.id)
}

// optional int64 longId = 2;
inline bool MyType1::has_longid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyType1::set_has_longid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyType1::clear_has_longid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyType1::clear_longid() {
  longid_ = GOOGLE_LONGLONG(0);
  clear_has_longid();
}
inline ::google::protobuf::int64 MyType1::longid() const {
  // @@protoc_insertion_point(field_get:MyType1.longId)
  return longid_;
}
inline void MyType1::set_longid(::google::protobuf::int64 value) {
  set_has_longid();
  longid_ = value;
  // @@protoc_insertion_point(field_set:MyType1.longId)
}

// optional bytes StrMessage = 3;
inline bool MyType1::has_strmessage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MyType1::set_has_strmessage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MyType1::clear_has_strmessage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MyType1::clear_strmessage() {
  if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_->clear();
  }
  clear_has_strmessage();
}
inline const ::std::string& MyType1::strmessage() const {
  // @@protoc_insertion_point(field_get:MyType1.StrMessage)
  return *strmessage_;
}
inline void MyType1::set_strmessage(const ::std::string& value) {
  set_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_ = new ::std::string;
  }
  strmessage_->assign(value);
  // @@protoc_insertion_point(field_set:MyType1.StrMessage)
}
inline void MyType1::set_strmessage(const char* value) {
  set_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_ = new ::std::string;
  }
  strmessage_->assign(value);
  // @@protoc_insertion_point(field_set_char:MyType1.StrMessage)
}
inline void MyType1::set_strmessage(const void* value, size_t size) {
  set_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_ = new ::std::string;
  }
  strmessage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MyType1.StrMessage)
}
inline ::std::string* MyType1::mutable_strmessage() {
  set_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MyType1.StrMessage)
  return strmessage_;
}
inline ::std::string* MyType1::release_strmessage() {
  clear_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strmessage_;
    strmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MyType1::set_allocated_strmessage(::std::string* strmessage) {
  if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strmessage_;
  }
  if (strmessage) {
    set_has_strmessage();
    strmessage_ = strmessage;
  } else {
    clear_has_strmessage();
    strmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MyType1.StrMessage)
}

// -------------------------------------------------------------------

// MyType2

// optional int32 id = 1;
inline bool MyType2::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyType2::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyType2::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyType2::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MyType2::id() const {
  // @@protoc_insertion_point(field_get:MyType2.id)
  return id_;
}
inline void MyType2::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MyType2.id)
}

// optional int64 longId = 2;
inline bool MyType2::has_longid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyType2::set_has_longid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyType2::clear_has_longid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyType2::clear_longid() {
  longid_ = GOOGLE_LONGLONG(0);
  clear_has_longid();
}
inline ::google::protobuf::int64 MyType2::longid() const {
  // @@protoc_insertion_point(field_get:MyType2.longId)
  return longid_;
}
inline void MyType2::set_longid(::google::protobuf::int64 value) {
  set_has_longid();
  longid_ = value;
  // @@protoc_insertion_point(field_set:MyType2.longId)
}

// optional bytes StrMessage = 3;
inline bool MyType2::has_strmessage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MyType2::set_has_strmessage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MyType2::clear_has_strmessage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MyType2::clear_strmessage() {
  if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_->clear();
  }
  clear_has_strmessage();
}
inline const ::std::string& MyType2::strmessage() const {
  // @@protoc_insertion_point(field_get:MyType2.StrMessage)
  return *strmessage_;
}
inline void MyType2::set_strmessage(const ::std::string& value) {
  set_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_ = new ::std::string;
  }
  strmessage_->assign(value);
  // @@protoc_insertion_point(field_set:MyType2.StrMessage)
}
inline void MyType2::set_strmessage(const char* value) {
  set_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_ = new ::std::string;
  }
  strmessage_->assign(value);
  // @@protoc_insertion_point(field_set_char:MyType2.StrMessage)
}
inline void MyType2::set_strmessage(const void* value, size_t size) {
  set_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_ = new ::std::string;
  }
  strmessage_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MyType2.StrMessage)
}
inline ::std::string* MyType2::mutable_strmessage() {
  set_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    strmessage_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MyType2.StrMessage)
  return strmessage_;
}
inline ::std::string* MyType2::release_strmessage() {
  clear_has_strmessage();
  if (strmessage_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = strmessage_;
    strmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MyType2::set_allocated_strmessage(::std::string* strmessage) {
  if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strmessage_;
  }
  if (strmessage) {
    set_has_strmessage();
    strmessage_ = strmessage;
  } else {
    clear_has_strmessage();
    strmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MyType2.StrMessage)
}

// -------------------------------------------------------------------

// MyType3

// repeated int32 id = 1;
inline int MyType3::id_size() const {
  return id_.size();
}
inline void MyType3::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 MyType3::id(int index) const {
  // @@protoc_insertion_point(field_get:MyType3.id)
  return id_.Get(index);
}
inline void MyType3::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyType3.id)
}
inline void MyType3::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:MyType3.id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MyType3::id() const {
  // @@protoc_insertion_point(field_list:MyType3.id)
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MyType3::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:MyType3.id)
  return &id_;
}

// repeated int64 longId = 2;
inline int MyType3::longid_size() const {
  return longid_.size();
}
inline void MyType3::clear_longid() {
  longid_.Clear();
}
inline ::google::protobuf::int64 MyType3::longid(int index) const {
  // @@protoc_insertion_point(field_get:MyType3.longId)
  return longid_.Get(index);
}
inline void MyType3::set_longid(int index, ::google::protobuf::int64 value) {
  longid_.Set(index, value);
  // @@protoc_insertion_point(field_set:MyType3.longId)
}
inline void MyType3::add_longid(::google::protobuf::int64 value) {
  longid_.Add(value);
  // @@protoc_insertion_point(field_add:MyType3.longId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MyType3::longid() const {
  // @@protoc_insertion_point(field_list:MyType3.longId)
  return longid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MyType3::mutable_longid() {
  // @@protoc_insertion_point(field_mutable_list:MyType3.longId)
  return &longid_;
}

// repeated bytes StrMessage = 3;
inline int MyType3::strmessage_size() const {
  return strmessage_.size();
}
inline void MyType3::clear_strmessage() {
  strmessage_.Clear();
}
inline const ::std::string& MyType3::strmessage(int index) const {
  // @@protoc_insertion_point(field_get:MyType3.StrMessage)
  return strmessage_.Get(index);
}
inline ::std::string* MyType3::mutable_strmessage(int index) {
  // @@protoc_insertion_point(field_mutable:MyType3.StrMessage)
  return strmessage_.Mutable(index);
}
inline void MyType3::set_strmessage(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MyType3.StrMessage)
  strmessage_.Mutable(index)->assign(value);
}
inline void MyType3::set_strmessage(int index, const char* value) {
  strmessage_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MyType3.StrMessage)
}
inline void MyType3::set_strmessage(int index, const void* value, size_t size) {
  strmessage_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MyType3.StrMessage)
}
inline ::std::string* MyType3::add_strmessage() {
  return strmessage_.Add();
}
inline void MyType3::add_strmessage(const ::std::string& value) {
  strmessage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MyType3.StrMessage)
}
inline void MyType3::add_strmessage(const char* value) {
  strmessage_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MyType3.StrMessage)
}
inline void MyType3::add_strmessage(const void* value, size_t size) {
  strmessage_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MyType3.StrMessage)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MyType3::strmessage() const {
  // @@protoc_insertion_point(field_list:MyType3.StrMessage)
  return strmessage_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MyType3::mutable_strmessage() {
  // @@protoc_insertion_point(field_mutable_list:MyType3.StrMessage)
  return &strmessage_;
}

// -------------------------------------------------------------------

// MyTypeArray

// repeated .MyType t = 1;
inline int MyTypeArray::t_size() const {
  return t_.size();
}
inline void MyTypeArray::clear_t() {
  t_.Clear();
}
inline const ::MyType& MyTypeArray::t(int index) const {
  // @@protoc_insertion_point(field_get:MyTypeArray.t)
  return t_.Get(index);
}
inline ::MyType* MyTypeArray::mutable_t(int index) {
  // @@protoc_insertion_point(field_mutable:MyTypeArray.t)
  return t_.Mutable(index);
}
inline ::MyType* MyTypeArray::add_t() {
  // @@protoc_insertion_point(field_add:MyTypeArray.t)
  return t_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MyType >&
MyTypeArray::t() const {
  // @@protoc_insertion_point(field_list:MyTypeArray.t)
  return t_;
}
inline ::google::protobuf::RepeatedPtrField< ::MyType >*
MyTypeArray::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:MyTypeArray.t)
  return &t_;
}

// repeated .MyType t1 = 2;
inline int MyTypeArray::t1_size() const {
  return t1_.size();
}
inline void MyTypeArray::clear_t1() {
  t1_.Clear();
}
inline const ::MyType& MyTypeArray::t1(int index) const {
  // @@protoc_insertion_point(field_get:MyTypeArray.t1)
  return t1_.Get(index);
}
inline ::MyType* MyTypeArray::mutable_t1(int index) {
  // @@protoc_insertion_point(field_mutable:MyTypeArray.t1)
  return t1_.Mutable(index);
}
inline ::MyType* MyTypeArray::add_t1() {
  // @@protoc_insertion_point(field_add:MyTypeArray.t1)
  return t1_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MyType >&
MyTypeArray::t1() const {
  // @@protoc_insertion_point(field_list:MyTypeArray.t1)
  return t1_;
}
inline ::google::protobuf::RepeatedPtrField< ::MyType >*
MyTypeArray::mutable_t1() {
  // @@protoc_insertion_point(field_mutable_list:MyTypeArray.t1)
  return &t1_;
}

// repeated .MyType t2 = 3;
inline int MyTypeArray::t2_size() const {
  return t2_.size();
}
inline void MyTypeArray::clear_t2() {
  t2_.Clear();
}
inline const ::MyType& MyTypeArray::t2(int index) const {
  // @@protoc_insertion_point(field_get:MyTypeArray.t2)
  return t2_.Get(index);
}
inline ::MyType* MyTypeArray::mutable_t2(int index) {
  // @@protoc_insertion_point(field_mutable:MyTypeArray.t2)
  return t2_.Mutable(index);
}
inline ::MyType* MyTypeArray::add_t2() {
  // @@protoc_insertion_point(field_add:MyTypeArray.t2)
  return t2_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MyType >&
MyTypeArray::t2() const {
  // @@protoc_insertion_point(field_list:MyTypeArray.t2)
  return t2_;
}
inline ::google::protobuf::RepeatedPtrField< ::MyType >*
MyTypeArray::mutable_t2() {
  // @@protoc_insertion_point(field_mutable_list:MyTypeArray.t2)
  return &t2_;
}

// repeated .MyType t3 = 4;
inline int MyTypeArray::t3_size() const {
  return t3_.size();
}
inline void MyTypeArray::clear_t3() {
  t3_.Clear();
}
inline const ::MyType& MyTypeArray::t3(int index) const {
  // @@protoc_insertion_point(field_get:MyTypeArray.t3)
  return t3_.Get(index);
}
inline ::MyType* MyTypeArray::mutable_t3(int index) {
  // @@protoc_insertion_point(field_mutable:MyTypeArray.t3)
  return t3_.Mutable(index);
}
inline ::MyType* MyTypeArray::add_t3() {
  // @@protoc_insertion_point(field_add:MyTypeArray.t3)
  return t3_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MyType >&
MyTypeArray::t3() const {
  // @@protoc_insertion_point(field_list:MyTypeArray.t3)
  return t3_;
}
inline ::google::protobuf::RepeatedPtrField< ::MyType >*
MyTypeArray::mutable_t3() {
  // @@protoc_insertion_point(field_mutable_list:MyTypeArray.t3)
  return &t3_;
}

// -------------------------------------------------------------------

// TestRequiredField

// required .MyType val = 1;
inline bool TestRequiredField::has_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestRequiredField::set_has_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestRequiredField::clear_has_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestRequiredField::clear_val() {
  if (val_ != NULL) val_->::MyType::Clear();
  clear_has_val();
}
inline const ::MyType& TestRequiredField::val() const {
  // @@protoc_insertion_point(field_get:TestRequiredField.val)
  return val_ != NULL ? *val_ : *default_instance_->val_;
}
inline ::MyType* TestRequiredField::mutable_val() {
  set_has_val();
  if (val_ == NULL) val_ = new ::MyType;
  // @@protoc_insertion_point(field_mutable:TestRequiredField.val)
  return val_;
}
inline ::MyType* TestRequiredField::release_val() {
  clear_has_val();
  ::MyType* temp = val_;
  val_ = NULL;
  return temp;
}
inline void TestRequiredField::set_allocated_val(::MyType* val) {
  delete val_;
  val_ = val;
  if (val) {
    set_has_val();
  } else {
    clear_has_val();
  }
  // @@protoc_insertion_point(field_set_allocated:TestRequiredField.val)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mytype_2eproto__INCLUDED
