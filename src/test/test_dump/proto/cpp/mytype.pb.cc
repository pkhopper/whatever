// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mytype.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mytype.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MyType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyType1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyType1_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyType2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyType2_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyType3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyType3_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyTypeArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyTypeArray_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mytype_2eproto() {
  protobuf_AddDesc_mytype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mytype.proto");
  GOOGLE_CHECK(file != NULL);
  MyType_descriptor_ = file->message_type(0);
  static const int MyType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType, longid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType, strmessage_),
  };
  MyType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyType_descriptor_,
      MyType::default_instance_,
      MyType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyType));
  MyType1_descriptor_ = file->message_type(1);
  static const int MyType1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType1, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType1, longid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType1, strmessage_),
  };
  MyType1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyType1_descriptor_,
      MyType1::default_instance_,
      MyType1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyType1));
  MyType2_descriptor_ = file->message_type(2);
  static const int MyType2_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType2, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType2, longid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType2, strmessage_),
  };
  MyType2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyType2_descriptor_,
      MyType2::default_instance_,
      MyType2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyType2));
  MyType3_descriptor_ = file->message_type(3);
  static const int MyType3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType3, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType3, longid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType3, strmessage_),
  };
  MyType3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyType3_descriptor_,
      MyType3::default_instance_,
      MyType3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyType3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyType3));
  MyTypeArray_descriptor_ = file->message_type(4);
  static const int MyTypeArray_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyTypeArray, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyTypeArray, t1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyTypeArray, t2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyTypeArray, t3_),
  };
  MyTypeArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyTypeArray_descriptor_,
      MyTypeArray::default_instance_,
      MyTypeArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyTypeArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyTypeArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyTypeArray));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mytype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyType_descriptor_, &MyType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyType1_descriptor_, &MyType1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyType2_descriptor_, &MyType2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyType3_descriptor_, &MyType3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyTypeArray_descriptor_, &MyTypeArray::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mytype_2eproto() {
  delete MyType::default_instance_;
  delete MyType_reflection_;
  delete MyType1::default_instance_;
  delete MyType1_reflection_;
  delete MyType2::default_instance_;
  delete MyType2_reflection_;
  delete MyType3::default_instance_;
  delete MyType3_reflection_;
  delete MyTypeArray::default_instance_;
  delete MyTypeArray_reflection_;
}

void protobuf_AddDesc_mytype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014mytype.proto\"8\n\006MyType\022\n\n\002id\030\001 \001(\005\022\016\n\006"
    "longId\030\002 \001(\003\022\022\n\nStrMessage\030\003 \001(\014\"9\n\007MyTy"
    "pe1\022\n\n\002id\030\001 \001(\005\022\016\n\006longId\030\002 \001(\003\022\022\n\nStrMe"
    "ssage\030\003 \001(\014\"9\n\007MyType2\022\n\n\002id\030\001 \001(\005\022\016\n\006lo"
    "ngId\030\002 \001(\003\022\022\n\nStrMessage\030\003 \001(\014\"9\n\007MyType"
    "3\022\n\n\002id\030\001 \001(\005\022\016\n\006longId\030\002 \001(\003\022\022\n\nStrMess"
    "age\030\003 \001(\014\"`\n\013MyTypeArray\022\022\n\001t\030\001 \003(\0132\007.My"
    "Type\022\023\n\002t1\030\002 \003(\0132\007.MyType\022\023\n\002t2\030\003 \003(\0132\007."
    "MyType\022\023\n\002t3\030\004 \003(\0132\007.MyType", 347);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mytype.proto", &protobuf_RegisterTypes);
  MyType::default_instance_ = new MyType();
  MyType1::default_instance_ = new MyType1();
  MyType2::default_instance_ = new MyType2();
  MyType3::default_instance_ = new MyType3();
  MyTypeArray::default_instance_ = new MyTypeArray();
  MyType::default_instance_->InitAsDefaultInstance();
  MyType1::default_instance_->InitAsDefaultInstance();
  MyType2::default_instance_->InitAsDefaultInstance();
  MyType3::default_instance_->InitAsDefaultInstance();
  MyTypeArray::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mytype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mytype_2eproto {
  StaticDescriptorInitializer_mytype_2eproto() {
    protobuf_AddDesc_mytype_2eproto();
  }
} static_descriptor_initializer_mytype_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MyType::kIdFieldNumber;
const int MyType::kLongIdFieldNumber;
const int MyType::kStrMessageFieldNumber;
#endif  // !_MSC_VER

MyType::MyType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyType)
}

void MyType::InitAsDefaultInstance() {
}

MyType::MyType(const MyType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyType)
}

void MyType::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  longid_ = GOOGLE_LONGLONG(0);
  strmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyType::~MyType() {
  // @@protoc_insertion_point(destructor:MyType)
  SharedDtor();
}

void MyType::SharedDtor() {
  if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strmessage_;
  }
  if (this != default_instance_) {
  }
}

void MyType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyType_descriptor_;
}

const MyType& MyType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mytype_2eproto();
  return *default_instance_;
}

MyType* MyType::default_instance_ = NULL;

MyType* MyType::New() const {
  return new MyType;
}

void MyType::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0;
    longid_ = GOOGLE_LONGLONG(0);
    if (has_strmessage()) {
      if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strmessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_longId;
        break;
      }

      // optional int64 longId = 2;
      case 2: {
        if (tag == 16) {
         parse_longId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &longid_)));
          set_has_longid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_StrMessage;
        break;
      }

      // optional bytes StrMessage = 3;
      case 3: {
        if (tag == 26) {
         parse_StrMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyType)
  return false;
#undef DO_
}

void MyType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyType)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 longId = 2;
  if (has_longid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->longid(), output);
  }

  // optional bytes StrMessage = 3;
  if (has_strmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->strmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MyType)
}

::google::protobuf::uint8* MyType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyType)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 longId = 2;
  if (has_longid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->longid(), target);
  }

  // optional bytes StrMessage = 3;
  if (has_strmessage()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyType)
  return target;
}

int MyType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 longId = 2;
    if (has_longid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->longid());
    }

    // optional bytes StrMessage = 3;
    if (has_strmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyType::MergeFrom(const MyType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_longid()) {
      set_longid(from.longid());
    }
    if (from.has_strmessage()) {
      set_strmessage(from.strmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyType::CopyFrom(const MyType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyType::IsInitialized() const {

  return true;
}

void MyType::Swap(MyType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(longid_, other->longid_);
    std::swap(strmessage_, other->strmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyType_descriptor_;
  metadata.reflection = MyType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MyType1::kIdFieldNumber;
const int MyType1::kLongIdFieldNumber;
const int MyType1::kStrMessageFieldNumber;
#endif  // !_MSC_VER

MyType1::MyType1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyType1)
}

void MyType1::InitAsDefaultInstance() {
}

MyType1::MyType1(const MyType1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyType1)
}

void MyType1::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  longid_ = GOOGLE_LONGLONG(0);
  strmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyType1::~MyType1() {
  // @@protoc_insertion_point(destructor:MyType1)
  SharedDtor();
}

void MyType1::SharedDtor() {
  if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strmessage_;
  }
  if (this != default_instance_) {
  }
}

void MyType1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyType1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyType1_descriptor_;
}

const MyType1& MyType1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mytype_2eproto();
  return *default_instance_;
}

MyType1* MyType1::default_instance_ = NULL;

MyType1* MyType1::New() const {
  return new MyType1;
}

void MyType1::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0;
    longid_ = GOOGLE_LONGLONG(0);
    if (has_strmessage()) {
      if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strmessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyType1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyType1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_longId;
        break;
      }

      // optional int64 longId = 2;
      case 2: {
        if (tag == 16) {
         parse_longId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &longid_)));
          set_has_longid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_StrMessage;
        break;
      }

      // optional bytes StrMessage = 3;
      case 3: {
        if (tag == 26) {
         parse_StrMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyType1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyType1)
  return false;
#undef DO_
}

void MyType1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyType1)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 longId = 2;
  if (has_longid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->longid(), output);
  }

  // optional bytes StrMessage = 3;
  if (has_strmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->strmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MyType1)
}

::google::protobuf::uint8* MyType1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyType1)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 longId = 2;
  if (has_longid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->longid(), target);
  }

  // optional bytes StrMessage = 3;
  if (has_strmessage()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyType1)
  return target;
}

int MyType1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 longId = 2;
    if (has_longid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->longid());
    }

    // optional bytes StrMessage = 3;
    if (has_strmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyType1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyType1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyType1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyType1::MergeFrom(const MyType1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_longid()) {
      set_longid(from.longid());
    }
    if (from.has_strmessage()) {
      set_strmessage(from.strmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyType1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyType1::CopyFrom(const MyType1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyType1::IsInitialized() const {

  return true;
}

void MyType1::Swap(MyType1* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(longid_, other->longid_);
    std::swap(strmessage_, other->strmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyType1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyType1_descriptor_;
  metadata.reflection = MyType1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MyType2::kIdFieldNumber;
const int MyType2::kLongIdFieldNumber;
const int MyType2::kStrMessageFieldNumber;
#endif  // !_MSC_VER

MyType2::MyType2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyType2)
}

void MyType2::InitAsDefaultInstance() {
}

MyType2::MyType2(const MyType2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyType2)
}

void MyType2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  longid_ = GOOGLE_LONGLONG(0);
  strmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyType2::~MyType2() {
  // @@protoc_insertion_point(destructor:MyType2)
  SharedDtor();
}

void MyType2::SharedDtor() {
  if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strmessage_;
  }
  if (this != default_instance_) {
  }
}

void MyType2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyType2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyType2_descriptor_;
}

const MyType2& MyType2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mytype_2eproto();
  return *default_instance_;
}

MyType2* MyType2::default_instance_ = NULL;

MyType2* MyType2::New() const {
  return new MyType2;
}

void MyType2::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0;
    longid_ = GOOGLE_LONGLONG(0);
    if (has_strmessage()) {
      if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strmessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyType2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyType2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_longId;
        break;
      }

      // optional int64 longId = 2;
      case 2: {
        if (tag == 16) {
         parse_longId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &longid_)));
          set_has_longid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_StrMessage;
        break;
      }

      // optional bytes StrMessage = 3;
      case 3: {
        if (tag == 26) {
         parse_StrMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyType2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyType2)
  return false;
#undef DO_
}

void MyType2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyType2)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 longId = 2;
  if (has_longid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->longid(), output);
  }

  // optional bytes StrMessage = 3;
  if (has_strmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->strmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MyType2)
}

::google::protobuf::uint8* MyType2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyType2)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 longId = 2;
  if (has_longid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->longid(), target);
  }

  // optional bytes StrMessage = 3;
  if (has_strmessage()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyType2)
  return target;
}

int MyType2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 longId = 2;
    if (has_longid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->longid());
    }

    // optional bytes StrMessage = 3;
    if (has_strmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyType2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyType2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyType2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyType2::MergeFrom(const MyType2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_longid()) {
      set_longid(from.longid());
    }
    if (from.has_strmessage()) {
      set_strmessage(from.strmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyType2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyType2::CopyFrom(const MyType2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyType2::IsInitialized() const {

  return true;
}

void MyType2::Swap(MyType2* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(longid_, other->longid_);
    std::swap(strmessage_, other->strmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyType2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyType2_descriptor_;
  metadata.reflection = MyType2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MyType3::kIdFieldNumber;
const int MyType3::kLongIdFieldNumber;
const int MyType3::kStrMessageFieldNumber;
#endif  // !_MSC_VER

MyType3::MyType3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyType3)
}

void MyType3::InitAsDefaultInstance() {
}

MyType3::MyType3(const MyType3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyType3)
}

void MyType3::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  longid_ = GOOGLE_LONGLONG(0);
  strmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyType3::~MyType3() {
  // @@protoc_insertion_point(destructor:MyType3)
  SharedDtor();
}

void MyType3::SharedDtor() {
  if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strmessage_;
  }
  if (this != default_instance_) {
  }
}

void MyType3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyType3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyType3_descriptor_;
}

const MyType3& MyType3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mytype_2eproto();
  return *default_instance_;
}

MyType3* MyType3::default_instance_ = NULL;

MyType3* MyType3::New() const {
  return new MyType3;
}

void MyType3::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0;
    longid_ = GOOGLE_LONGLONG(0);
    if (has_strmessage()) {
      if (strmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strmessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyType3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyType3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_longId;
        break;
      }

      // optional int64 longId = 2;
      case 2: {
        if (tag == 16) {
         parse_longId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &longid_)));
          set_has_longid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_StrMessage;
        break;
      }

      // optional bytes StrMessage = 3;
      case 3: {
        if (tag == 26) {
         parse_StrMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyType3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyType3)
  return false;
#undef DO_
}

void MyType3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyType3)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 longId = 2;
  if (has_longid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->longid(), output);
  }

  // optional bytes StrMessage = 3;
  if (has_strmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->strmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MyType3)
}

::google::protobuf::uint8* MyType3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyType3)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 longId = 2;
  if (has_longid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->longid(), target);
  }

  // optional bytes StrMessage = 3;
  if (has_strmessage()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyType3)
  return target;
}

int MyType3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 longId = 2;
    if (has_longid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->longid());
    }

    // optional bytes StrMessage = 3;
    if (has_strmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyType3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyType3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyType3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyType3::MergeFrom(const MyType3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_longid()) {
      set_longid(from.longid());
    }
    if (from.has_strmessage()) {
      set_strmessage(from.strmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyType3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyType3::CopyFrom(const MyType3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyType3::IsInitialized() const {

  return true;
}

void MyType3::Swap(MyType3* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(longid_, other->longid_);
    std::swap(strmessage_, other->strmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyType3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyType3_descriptor_;
  metadata.reflection = MyType3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MyTypeArray::kTFieldNumber;
const int MyTypeArray::kT1FieldNumber;
const int MyTypeArray::kT2FieldNumber;
const int MyTypeArray::kT3FieldNumber;
#endif  // !_MSC_VER

MyTypeArray::MyTypeArray()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyTypeArray)
}

void MyTypeArray::InitAsDefaultInstance() {
}

MyTypeArray::MyTypeArray(const MyTypeArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MyTypeArray)
}

void MyTypeArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyTypeArray::~MyTypeArray() {
  // @@protoc_insertion_point(destructor:MyTypeArray)
  SharedDtor();
}

void MyTypeArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyTypeArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyTypeArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyTypeArray_descriptor_;
}

const MyTypeArray& MyTypeArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mytype_2eproto();
  return *default_instance_;
}

MyTypeArray* MyTypeArray::default_instance_ = NULL;

MyTypeArray* MyTypeArray::New() const {
  return new MyTypeArray;
}

void MyTypeArray::Clear() {
  t_.Clear();
  t1_.Clear();
  t2_.Clear();
  t3_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyTypeArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyTypeArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MyType t = 1;
      case 1: {
        if (tag == 10) {
         parse_t:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_t()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_t;
        if (input->ExpectTag(18)) goto parse_t1;
        break;
      }

      // repeated .MyType t1 = 2;
      case 2: {
        if (tag == 18) {
         parse_t1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_t1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_t1;
        if (input->ExpectTag(26)) goto parse_t2;
        break;
      }

      // repeated .MyType t2 = 3;
      case 3: {
        if (tag == 26) {
         parse_t2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_t2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_t2;
        if (input->ExpectTag(34)) goto parse_t3;
        break;
      }

      // repeated .MyType t3 = 4;
      case 4: {
        if (tag == 34) {
         parse_t3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_t3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_t3;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyTypeArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyTypeArray)
  return false;
#undef DO_
}

void MyTypeArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyTypeArray)
  // repeated .MyType t = 1;
  for (int i = 0; i < this->t_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->t(i), output);
  }

  // repeated .MyType t1 = 2;
  for (int i = 0; i < this->t1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->t1(i), output);
  }

  // repeated .MyType t2 = 3;
  for (int i = 0; i < this->t2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->t2(i), output);
  }

  // repeated .MyType t3 = 4;
  for (int i = 0; i < this->t3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->t3(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MyTypeArray)
}

::google::protobuf::uint8* MyTypeArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyTypeArray)
  // repeated .MyType t = 1;
  for (int i = 0; i < this->t_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->t(i), target);
  }

  // repeated .MyType t1 = 2;
  for (int i = 0; i < this->t1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->t1(i), target);
  }

  // repeated .MyType t2 = 3;
  for (int i = 0; i < this->t2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->t2(i), target);
  }

  // repeated .MyType t3 = 4;
  for (int i = 0; i < this->t3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->t3(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyTypeArray)
  return target;
}

int MyTypeArray::ByteSize() const {
  int total_size = 0;

  // repeated .MyType t = 1;
  total_size += 1 * this->t_size();
  for (int i = 0; i < this->t_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->t(i));
  }

  // repeated .MyType t1 = 2;
  total_size += 1 * this->t1_size();
  for (int i = 0; i < this->t1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->t1(i));
  }

  // repeated .MyType t2 = 3;
  total_size += 1 * this->t2_size();
  for (int i = 0; i < this->t2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->t2(i));
  }

  // repeated .MyType t3 = 4;
  total_size += 1 * this->t3_size();
  for (int i = 0; i < this->t3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->t3(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyTypeArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyTypeArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyTypeArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyTypeArray::MergeFrom(const MyTypeArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  t_.MergeFrom(from.t_);
  t1_.MergeFrom(from.t1_);
  t2_.MergeFrom(from.t2_);
  t3_.MergeFrom(from.t3_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyTypeArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyTypeArray::CopyFrom(const MyTypeArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyTypeArray::IsInitialized() const {

  return true;
}

void MyTypeArray::Swap(MyTypeArray* other) {
  if (other != this) {
    t_.Swap(&other->t_);
    t1_.Swap(&other->t1_);
    t2_.Swap(&other->t2_);
    t3_.Swap(&other->t3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyTypeArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyTypeArray_descriptor_;
  metadata.reflection = MyTypeArray_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
